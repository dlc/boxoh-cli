#!/usr/bin/perl -w

use strict;
use vars qw($ME $VERSION %OPTS %ACTIONS %TRACKERS);

$ME = basename($0);
$VERSION = "0.01";

use Data::Dumper;
use Digest;
use File::Basename qw(basename);
use Getopt::Long qw(GetOptionsFromArray);
use JSON;
use POSIX qw(strftime);
use Text::Abbrev qw(abbrev);
use XML::RSS;

# Tracking states
use constant STATUS_NEW         => "NEW";
use constant STATUS_IN_TRANSIT  => "IN TRANSIT";
use constant STATUS_DELIVERED   => "DELIVERED";
use constant STATUS_HALTED      => "HALTED";
use constant STATUS_UNTRACKED   => "UNTRACKED";

# Provider of tracking info
use constant TRACKED_VIA_BOXOH      => "BOXOH";
use constant TRACKED_VIA_LASERSHIP  => "LASERSHIP";

use constant EVENT_TS_FORMAT    => "%Y-%m-%d %H:%M";

# Figure out what to do
my ($action, $id, %opts) = parse_command(@ARGV);

# Perform the action
$action->($id, %opts);

exit 0;

# ----------------------------------------------------------------------
# Subroutines
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# parse_command(@ARGV)
# ----------------------------------------------------------------------
sub parse_command {
    my @argv = @_;
    my %cmds = abbrev keys %ACTIONS;
    my $cmds_re = join '|', keys %cmds;
    my $cmd = "nothing";
    my ($id, %opts);

    GetOptionsFromArray(\@argv,
        'all|A!'        => \my $A,
        'datastore|D=s' => \my $D,
        'version|V!'    => \my $V,
        'help|h!'       => \my $h,
        'outfile|o=s'   => \my $o,
        'title|t=s'     => \my $t,
    );

    %opts = (
        all         => $A,
        title       => $t,
        outfile     => $o,
        datastore   => ($D || $ENV{'PKTRK_DATASTORE'} || glob("~/.$ME.json")),
    );

    while (@argv) {
        my $arg = shift @argv;

        if ($arg =~ /^($cmds_re)$/i) {
            $cmd = $cmds{ lc "$1" };
        }
        else {
            $id .= $arg;
        }
    }

    # Normalize package ID
    if ($id) {
        $id =~ s/ //g;
        $id = uc $id;
    }

    # Overrides
    if ($h) {
        $cmd = "help";
    }

    if ($V) {
        $cmd = "version";
    }

    # Find the subroutine
    my $action = $ACTIONS{ $cmd } || $ACTIONS{ 'nothing' };

    return ($action, $id, %opts);
}

# ----------------------------------------------------------------------
# Datastore manipulation
# ----------------------------------------------------------------------
# get_datastore()
#
# Returns an array of package data.
# ----------------------------------------------------------------------
sub get_datastore {
    my $dspath = shift;
    my $ds;

    if (open my $fh, $dspath) {
        local $/;
        my $data = <$fh>;
        $ds = decode_json($data);
    }

    elsif (! -f $dspath) {
        # New datastore
        $ds = { packages => [ ] };
        save_datastore($dspath, $ds->{'packages'});
    }

    else {
        die "Can't open data store $dspath\n";
    }

    return $ds->{'packages'};
}

# ----------------------------------------------------------------------
# save_datastore(\@packages)
#
# Saves an array of packages.
# ----------------------------------------------------------------------
sub save_datastore {
    my $dspath = shift;
    my $ds = shift;

    if (open my $fh, ">", "$dspath.tmp") {
        print $fh to_json({ packages => $ds }, { pretty => 1 }) . "\n";
        close $fh;

        my $new_md5 = digest_file("$dspath.tmp");
        my $old_md5 = digest_file($dspath);

        rename "$dspath.tmp" => $dspath
            unless $new_md5 eq $old_md5;

        return 1;
    }

    die "Can't save data to $dspath\n";
}

# ----------------------------------------------------------------------
# digest_file($fname)
#
# Returns the checksum of a file.  This is to avoid overwriting an
# existing file if the contents haven't changed.
# ----------------------------------------------------------------------
sub digest_file {
    my $fname = shift;

    if (open my $fh, $fname) {
        my $ctx = Digest->new("SHA-1");
        $ctx->addfile($fh);
        return $ctx->hexdigest;
    }
}

# ----------------------------------------------------------------------
# get($uri)
#
# Get a representation of a URL, and return it as (\%head, $body) in
# list context, or just $body in scalar context. Follows redirects.
# ----------------------------------------------------------------------
sub get {
    my ($data, $body, $head, %head);

    if (my $uri = shift) {
        $data = `curl -sSik --connect-timeout 10 "$uri"`;
        $data =~ s/\r//g;   # Normalize carriage returns
        ($head, $body) = split /\n\n/, $data, 2;

        %head = map {
            my ($k, $v);
            if (/^HTTP\//) {
                $k = "status";
                $v = $_;
            }
            else {
                ($k, $v) = split /:\s*/, $_, 2;
            }

            (lc($k) => $v);
        } split /\n/, $head;
    }

    if ($head{'status'} =~ / 30. / && $head{'location'}) {
        return get($head{'location'});
    }

    return (\%head, $body) if wantarray;
    return $body;
}

# ----------------------------------------------------------------------
# tracked_via($name)
#
# Pretty print tracking service name
# ----------------------------------------------------------------------
sub tracked_via {
    my $tracker = shift;
    return $TRACKERS{ $tracker } || $tracker;
}

# ----------------------------------------------------------------------
# 
# ----------------------------------------------------------------------
sub track_via_lasership {
    my $id = shift;
    my $uri = lasership_uri($id);

    my $body = get($uri)
    my $data = decode_json($body);

}

# ----------------------------------------------------------------------
# lasership_uri($id[, $format])
#
# Helper method to generate a lasership URI.  Example ID LE14989937
# ----------------------------------------------------------------------
sub lasership_uri {
    my $id = shift;
    my $format = shift || 'json';

    return "http://lasership.com/track/$id/$format";
}

# ======================================================================
# Commands
# ======================================================================

# ----------------------------------------------------------------------
# Dump data etc
# ----------------------------------------------------------------------
sub cmd_dump {
    my ($id, %opts) = @_;
    $id ||= "undef";

    my $packages = get_datastore($opts{'datastore'});
    print "\$id = $id\n";
    print Data::Dumper->Dump([\%opts], ['opts']);
    print Data::Dumper->Dump([$packages], ['packages']);
}

# ----------------------------------------------------------------------
# cmd_nothing($id, %opts)
#
# Called when nothing is indicated on the command line.  Intended to be
# the default
# ----------------------------------------------------------------------
sub cmd_nothing {
    my ($id, %opts) = @_;

    print "$ME v$VERSION - Command line package tracking.\n";
    print "Run \`$ME help\` for details\n";
}

# ----------------------------------------------------------------------
# cmd_track($id, %opts)
#
# Add an item to the data store.  Options: -t TITLE title of the
# package
# ----------------------------------------------------------------------
sub cmd_track {
    my ($id, %opts) = @_;
    my $packages = get_datastore($opts{'datastore'});

    # Ensure package is not already tracked
    for my $pkg (@$packages) {
        if ($pkg->{'id'} eq $id) {
            print "Package $id already exists in database\n";
            return;
        }
    }

    push @$packages, {
        id          => $id,
        title       => (delete $opts{'title'} || $id),
        events      => [],
        status      => STATUS_NEW,
        tracked_via => "",
    };

    save_datastore($opts{'datastore'}, $packages);
}

# ----------------------------------------------------------------------
# cmd_untrack($id, %opts)
#
# Remove an item from the data store
# ----------------------------------------------------------------------
sub cmd_untrack {
    my ($id, %opts) = @_;
    my $packages = get_datastore($opts{'datastore'});

    for my $pkg (@$packages) {
        if ($pkg->{'id'} eq $id) {
            print "No longer tracking package $id\n";
            $pkg->{'status'} = STATUS_UNTRACKED;
        }
    }

    save_datastore($opts{'datastore'}, $packages);
}

# ----------------------------------------------------------------------
# cmd_edit($id, %opts)
#
# Edit the metadata of an item (title only, for now)
# ----------------------------------------------------------------------
sub cmd_edit {
    my ($id, %opts) = @_;
    my $packages = get_datastore($opts{'datastore'});

    return unless $opts{'title'};

    for my $pkg (@$packages) {
        if ($pkg->{'id'} eq $id) {

            # Special character %x indicates current title
            my $cur_title = $pkg->{'title'};
            $opts{'title'} =~ s/%x/$cur_title/g;

            $pkg->{'title'} = $opts{'title'};
            print "Set title for $pkg->{'id'} to '$opts{'title'}'\n";
        }
    }

    save_datastore($opts{'datastore'}, $packages);
}

# ----------------------------------------------------------------------
# cmd_list($id, %opts)
#
# Prints a list of packages  Options: -A emit all, otherwise only
# emit active packages
# ----------------------------------------------------------------------
sub cmd_list {
    my ($id, %opts) = @_;
    my $packages = get_datastore($opts{'datastore'});

    for my $pkg (@$packages) {
        if ($opts{'all'} || $pkg->{'status'} eq STATUS_IN_TRANSIT) {
            my $tracker = tracked_via($pkg->{'tracked_via'});

            if ($pkg->{'title'} ne $pkg->{'id'}) {
                printf "%s / %s (%s)\n",
                    $pkg->{'title'}, $pkg->{'id'}, $tracker;
            }
            else {
                printf "%s (%s)\n",
                    $pkg->{'id'}, $tracker;
            }
        }
    }

    # No save
}

# ----------------------------------------------------------------------
# cmd_update()
# 
# Refetches updates for every package not in the DELIVERED or HALTED
# state.
# ----------------------------------------------------------------------
sub cmd_update {
    my ($id, %opts) = @_;
    my $packages = get_datastore($opts{'datastore'});

    save_datastore($opts{'datastore'}, $packages);
}

# ----------------------------------------------------------------------
# cmd_genfeed($id, %opts)
#
# Generate an RSS feed.  Options: -o OUTFILE, otherwise writes to STDOUT.
# ----------------------------------------------------------------------
sub cmd_genfeed {
    my ($id, %opts) = @_;
    my $packages = get_datastore($opts{'datastore'});

    # No save
}

# ----------------------------------------------------------------------
# cmd_history($id, %opts)
#
# Emits history for $id. Format is:
# [2014-05-22 08:44] Event 1
# [2014-05-23 12:05] Event 2
# [2014-05-24 11:16] Event 3
# ----------------------------------------------------------------------
sub cmd_history {
    my ($id, %opts) = @_;
    my $packages = get_datastore($opts{'datastore'});

    return unless $id;

    for my $pkg (@$packages) {
        if ($pkg->{'id'} eq $id) {
            for my $e (@{ $pkg->{'events'} }) {
                my ($ts, $text) = @$e;
                printf "[%s] %s\n",
                    strftime(EVENT_TS_FORMAT, localtime $ts),
                    $text;
            }
        }
    }

    # No save
}

# ----------------------------------------------------------------------
# cmd_version($id, %opts)
# ----------------------------------------------------------------------
sub cmd_version {
    print "$ME v$VERSION\n";
}

# ----------------------------------------------------------------------
# cmd_help($id, %opts)
#
# Emit help information
# ----------------------------------------------------------------------
sub cmd_help {
    my ($id, %opts) = @_;
    print <<HELP;
$ME - Track packages from the command line, like a boss

Usage:

    \$ $ME COMMAND ID [options]

Commands:

    add / track ID [-t TITLE]
        Add a package to be tracked.  TITLE is optional, and, if
        provided, is used as the visual identifier (the ID is used
        by default).

    delete / remove / untrack ID
        Stop tracking a package.  This doesn't actually remove the
        package from the db, just from the display.  These can still
        be listed with the list -A command.

    list [-A]
        List tracked packages and their states.  Without -A, this
        only lists packages that have not yet been delivered.

    edit / rename -t TITLE ID
        Edit an existing tracked package to set the TITLE.  The special
        token %x indicates the current title, for a shortcut.

    info / events / history ID
        Emits tracking history for a particular ID.

    update
        Asks $ME to contact the tracking services and update the
        internal database with state information for each undelivered
        package.

    genfeed [-o FILENAME]
        Emits an RSS feed of the tracked packages to FILENAME,
        or STDOUT.

    dump
        Dump parsed info and the db.  For testing and debugging.

    help
        This help.

    version
        Print "$ME v$VERSION" and exit.

HELP
}

BEGIN {
    %ACTIONS = (
        'add'       => \&cmd_track,
        'delete'    => \&cmd_untrack,
        'dump'      => \&cmd_dump,
        'edit'      => \&cmd_edit,
        'events'    => \&cmd_history,
        'genfeed'   => \&cmd_genfeed,
        'help'      => \&cmd_help,
        'history'   => \&cmd_history,
        'info'      => \&cmd_history,
        'list'      => \&cmd_list,
        'nothing'   => \&cmd_nothing,
        'remove'    => \&cmd_untrack,
        'track'     => \&cmd_track,
        'untrack'   => \&cmd_untrack,
        'update'    => \&cmd_update,
        'version'   => \&cmd_version,
    );

    # These provide name mappings for pretty printing
    %TRACKERS = (
        "@{[TRACKED_VIA_BOXOH]}"     => "Boxoh",
        "@{[TRACKED_VIA_LASERSHIP]}" => "LaserShip",
    );

}

__END__
